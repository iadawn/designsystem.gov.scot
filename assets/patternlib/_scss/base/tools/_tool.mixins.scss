/*------------------------------------*\
    MIXINS
\*------------------------------------*/

@mixin media-query($mq) {
    $breakpoint-found: false;

    // Loop through the list of breakpoints we’ve provided in our settings file.
    @each $breakpoint in $breakpoints {

        // Grab the alias and the condition from their respective locations in
        // the list.
        $alias:     nth($breakpoint, 1);
        $condition: nth($breakpoint, 2);

        // If the media query we’ve specified has an alias and a condition...
        @if $mq == $alias and $condition {
            // ...tell the mixin that we’ve found it...
            $breakpoint-found: true;

            // ...and spit it out here.
            @media #{$condition} {
                @content;
            }
        }
    }

    // If the user specifies a non-exitent alias, send them a warning.
    @if $breakpoint-found == false{
        @warn "Oops! Breakpoint ‘#{$mq}’ does not exist."
    }
}

@mixin chevron($orientation: down, $size: 1em, $width: 3px) {
    $rotate: 0;
    @if $orientation == up {
        $rotate: -45deg;
    } @else if $orientation == right {
        $rotate: 45deg;
    } @else if $orientation == down {
        $rotate: 135deg;
    } @else if $orientation == left {
        $rotate: 225deg;
    }

    $linesize: #{$size * 1.414214 * 0.5};

    border: $width solid currentColor;
    border-width: $width $width 0 0;
    content: "";
    display: inline-block;
    height: $linesize;
    -webkit-transform: rotateX(0) rotateZ(#{$rotate});
    -ms-transform: rotateX(0) rotateZ(#{$rotate});
    transform: rotateX(0) rotateZ(#{$rotate});
    transition: transform 0.2s, top 0.2s;
    width: $linesize;
}

// /**
//  * Mixin to enforce consistency on block-style links, e.g. search results,
//  * category items, etc
//  */
@mixin blocklink ($link-selector: null) {
    display: block;
    position: relative;
    transition: background-color $transition-out-time;

    &:focus {
        outline: 3px solid $color__blocklink-bg--active;

        &:not(:active) {
            outline-color: $color__blocklink--focus__outline;
        }
    }

    &:hover:not(:focus) {
        outline: 0;
    }

    &:hover {
        background-color: $color__link--hover__background;
    }

    &:active {
        background-color: $color__blocklink-bg--active;
        // outline: initial;
        transition-duration: 0s;
    }

    &.#{$pl-prefix}current {
        background-color: $color__link--current__background;
    }

    @if $link-selector {
        #{$link-selector} {
            outline: 0;

            &:after {
                content: "";
                height: 100%;
                left: 0px;
                position: absolute;
                top: 0px;
                width: 100%;
                z-index: 0;
            }

            &:focus {
                &:after {
                    outline: 3px solid $color__blocklink-bg--active;
                }

                &:not(:active):after {
                    outline-color: $color__blocklink--focus__outline;
                }
            }
        }

        #{$link-selector}:hover {
            background: transparent;
        }
    }
}

/**
 * blocklink variant
 */
@mixin blocklink--solid($link-selector: null) {
    @include blocklink($link-selector);

    background-color: $color__white;
}

/**
 * Animated underscore used on logo images
 */
@mixin fancy-underscore($width: 1px) {
    position: relative;
    transition-duration: 0s !important;

    &:hover {
        background: transparent;
    }

    &:hover:not(:focus) {
        outline-width: 0;
    }

    &:active {
        background: $color__link--active__background;
    }

    &:after {
        background-color: currentColor;
        bottom: -6px;
        content: '';
        height: $width;
        left: 50%;
        opacity: 0;
        position: absolute;
        right: 50%;
        transition: left $transition-in-time, right $transition-in-time, opacity $transition-in-time;
    }

    &:hover:after {
        left: 0;
        opacity: 1;
        right: 0;
    }
}

/**
 * Mixin to enforce consistent margins on "block" elements, e.g. blockquotes,
 * info notes, accordions, etc
 */
@mixin block-margins {
    margin-top: 35px;
    margin-bottom: 35px;
}

/**
 * Mixin to enforce consistent open/close icons,
 * mobile section nav, accordions, etc
 */
@mixin indicator ($topOffset: 16px) {
    @include chevron();

    color: currentColor;
    right: 21px;
    position: absolute;
    top: $topOffset;
}

@mixin indicator--open ($topOffset: 20px) {
    @include chevron(up);
    top: $topOffset;
}
